"""===========================================================================================================================================================================Title:        ENERGY-CARBON OPTIMIZATION PLATFORMCreated:      October-2021Authors:      Alissa Ganter (aganter@ethz.ch)Organization: Laboratory of Risk and Reliability Engineering, ETH ZurichDescription:  Class is defining the postprocessing of the results.              The class takes as inputs the optimization problem (model) and the system configurations (system).              The class contains methods to read the results and save them in a result dictionary (resultDict).==========================================================================================================================================================================="""import loggingimport pyomo.environ as peimport csvimport osimport pickleimport pandas as pdclass Postprocess:    system    = dict()    pyoDict   = dict()    varDict   = dict()    varDf     = dict()    modelName = str()    def __init__(self, model, pyoDict, **kwargs):        """postprocessing of the results of the optimization        :param system: dictionary defining the system        :param model: optimization model"""        self.model   = model        self.system  = model.system        self.pyoDict = pyoDict        self.modelName = kwargs.get('modelName', self.modelName)        self.getVarValues()        self.createDataframes()        self.saveResults()    def getVarValues(self):        # print all variables        # TODO add function that writes all vars to a dictionary or dataframe (we could use the pyodict and add the results?)        for var in self.model.instance.component_objects(pe.Var, active=True):            self.varDict[var.name] = dict()            for index in var:                self.varDict[var.name][index] = pe.value(var[index])        # add results to pyoDict        self.pyoDict['varValues'] = self.varDict        self.pyoDict['Results']   = self.model.results    def getProperties(self, docString):        """get properties (doc, dimensions, domain)        :return docString:       documentation        :return dimensions:      dimensions of the parameter, variable, constraint"""        dimensions = docString.split('.')[1]        if 'Dimensions' in dimensions:            dimensions = dimensions.split('.')[-1].split(':')[-1]            if ',' in dimensions:                dimensions = dimensions.replace(' ','').split(',')            else:                dimensions = dimensions.strip()        return dimensions    def createDataframes(self):        for varName, varValues in self.varDict.items():            varResults = varValues.values()            indexValues = varValues.keys()            indexNames = self.getProperties(getattr(self.model.instance, varName).doc)            self.varDf[varName]= pd.DataFrame(varResults, index=pd.MultiIndex.from_tuples(indexValues, names=indexNames))    def saveResults(self):        # create directory        nameDir = f'./outputs/results{self.modelName}/'  # should we pass a name for the directory in compile so we don't overwrite the results        try:            os.makedirs(nameDir)        except OSError:            pass        # save pyoDict        with open(f'{nameDir}pyoDict.pickle', 'wb') as file:            pickle.dump(self.pyoDict, file, protocol=pickle.HIGHEST_PROTOCOL)        # save varDf        for varName, df in self.varDf.items():            df.to_csv(f'{nameDir}{varName}.csv')    # def getParamValues(self):    # print all parameters    # iterate over params: for param in self.model.instance.component_objects(pe.Param, active=True):    # get paramName: param.name    # iterate over paramIndices: for index in param: ...    # get paramValue: pe.value(param[index])