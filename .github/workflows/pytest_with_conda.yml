name: Tests

# Define when to run
on:
  schedule:
    - cron:  '30 4 1 * *'

  pull_request:
    branches: ['*']

# Env variables
env:
  CACHE_NUMBER: 0  # increase to reset cache manually

# Jobs
jobs:

  # check whether #skiptests is in pull request message or commmit message: 
  # The option #skiptests skips the tests   
  check_skiptests:
    runs-on: ubuntu-latest
    outputs:
      skiptests: ${{ steps.check_commit.outputs.skiptests }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for '#skiptests' in commit messages
        id: check_commit
        run: |
          PR_BODY=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" | jq -r '.body')

          if [[ "$PR_BODY" =~ "#skiptests" ]]; then
            skip="true"
          else
            skip="false"
          fi

          echo "skiptests=$skip" >> $GITHUB_ENV
          echo "skiptests=$skip" >> $GITHUB_OUTPUT
          echo "PR Body: $PR_BODY"
          echo "skiptests=$skip"
          

  matrix_prep:
    if: ${{ github.repository == 'ZEN-universe/ZEN-garden' && needs.check_skiptests.outputs.skiptests == 'false' }}
    needs: check_skiptests
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Env File
        id: check-env-file
        uses: tj-actions/changed-files@v46
        with:
          files: |
            zen_garden_env.yml

      - name: Set Env
        # trigger if env file change or on schedule
        if: ${{ steps.check-env-file.outputs.any_changed == 'true' || github.event_name == 'schedule' }}
        run: echo "ENV_STATE=env_change" >> $GITHUB_ENV

      - id: set-matrix
        uses: JoshuaTheMiller/conditional-build-matrix@main
        with:
          # Run filter -> see matrix_includes.json!
          filter: '[?runs_when==`${{ env.ENV_STATE }}` || runs_when==`${{ github.event_name }}` || runs_when==`always`]'

  build:
    if: ${{ github.repository == 'ZEN-universe/ZEN-garden' && needs.check_skiptests.outputs.skiptests == 'false' }}
    # the testing
    needs: matrix_prep
    strategy:
      fail-fast: false # if true all jobs are cancelled if one fails
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}

    name: ${{ matrix.label }}
    runs-on: ${{ matrix.os }}
    steps:
      # checkout the dev branch
      - uses: actions/checkout@v4

      # setup the conda env
      - name: Setup Miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
            miniforge-variant: Miniforge3
            miniforge-version: latest
            activate-environment: zen-garden-env
            use-mamba: true

      # date for the cache
      - name: Set cache date
        run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      # reset cache if env file changed
      - uses: actions/cache@v3
        with:
          path: ${{ matrix.prefix }}
          key: ${{ matrix.label }}-conda-${{ hashFiles('zen_garden_env.yml') }}-${{ env.DATE }}-${{ env.CACHE_NUMBER }}
        id: cache

      # # Clear mamba cache (for debugging)
      # - name: Clear Mamba and Conda Caches
      #   run: |
      #     mamba clean -a
      #     conda clean --all

      # This step is cached in case the env file was not changed
      - name: Update environment
        run: mamba env update -f zen_garden_env.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Install package
        shell: bash -l {0}
        run: pip install -e .

      - name: Run Tests
        shell: bash -l {0}
        run: |
          pytest --cov="zen_garden" -n auto tests/ -v
#          coverage report -m

      - name: Extract Coverage
        if: ${{ always() && matrix.label == 'linux-64' && github.event_name == 'push' }} # include always to overwrite cancel on failure of previous step
        shell: bash -l {0}
        run: |
          echo "COVERAGE_INT=$(coverage report -m | grep TOTAL | grep -oE '[0-9]+%' | grep -oE '[0-9]+')" >> $GITHUB_ENV
          echo "COVERAGE_FLT=$(coverage report -m --precision=2 | grep TOTAL | grep -oE '[0-9]+\.[0-9]+')" >> $GITHUB_ENV
      # COMMENTED OUT BECAUSE THIS LEAD TO A 400 Bad request ERROR
      - name: Create Coverage Badge
        if: ${{ always() && matrix.label == 'linux-64' && github.event_name == 'push' }}
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 30d479a5b4c591a63b7b0f41abbce6a0
          filename: zen_garden_coverage.json
          label: coverage
          message: ${{ env.COVERAGE_FLT }}%
          valColorRange: ${{ env.COVERAGE_INT }}
          maxColorRange: 100
          minColorRange: 0